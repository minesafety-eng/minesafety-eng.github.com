I"d<p>JAVA 5부터 제네릭타입이 추가되었습니다. 
제네릭타입을 사용하면 컴파일 과정에서 잘못된 타입사용을 미리 방지할 수 있다는 장점이 있습니다. 
대부분의 API 도큐먼트를 보면 제네릭표현이 많으므로 API에 대한 깊은 이해를 위해서는 제네릭에 대한 이해는 필수입니다.</p>

<h2 id="step-1--제네릭-타입">Step 1 : 제네릭 타입</h2>
<p>제네릭 <strong>타입</strong>은 &lt;&gt;을 가지는 클래스와 인터페이스를 말합니다. 
&lt;&gt;사이에는 &lt;T&gt;처럼 사용 시에 정해지는 즉 사용 시에 받아올 객체에 대한 파라메터를 대표합니다. 
&lt;T&gt;&lt;G&gt; 등 원하는 문자를 넣어주면 됩니다. 그렇다면 이전 코드와 제네릭을 사용하는 코드를 비교해보겠습니다. 
아래의 클래스는 원하는 객체를 넣어주던 코드입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObj</span><span class="o">(</span> <span class="nc">Object</span> <span class="n">obj</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span>  <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">getObj</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">BeforeTest</span> <span class="n">beforeTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeforeTest</span><span class="o">();</span>
    <span class="nc">Integer</span> <span class="n">tempInt</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">setObj</span><span class="o">(</span><span class="n">tempInt</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Integer</span><span class="o">)</span><span class="n">beforeTest</span><span class="o">.</span><span class="na">getObj</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1000</span><span class="o">;</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"합은 : "</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-wl" data-lang="wl"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="o">//</span><span class="w"> </span><span class="err">결과</span><span class="w"> 
</span><span class="err">합은</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="m">1100</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>위의 코드는 아쉬운 점은 모든 객체를 받아서 Setting 할 수 있지만 사용 시에 사용 객체로 형 변환 해야 합니다. 
또한 저장 시에도 보이진 않지만 Integer 객체가 Object 객체로 형 변환됩니다. 이런 문제를 해결한 제네릭을 이용한 방법입니다. 
클래스명 뒤에 &lt;T&gt;을 붙이고 클래스 내부 T에서 T를 사용할 수 있습니다. 클라이언트 코드에서 T에 대한 타입을 정해줍니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeTest</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObj</span><span class="o">(</span> <span class="no">T</span> <span class="n">obj</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span>  <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getObj</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">BeforeTest</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">beforeTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeforeTest</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
    <span class="nc">Integer</span> <span class="n">tempInt</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">setObj</span><span class="o">(</span><span class="n">tempInt</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">beforeTest</span><span class="o">.</span><span class="na">getObj</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1000</span><span class="o">;</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"합은 : "</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="step-2--멀티-타입-파라미터">Step 2 : 멀티 타입 파라미터</h2>
<p>제네릭 타입은 두 개 이상의 파라메터를 클라이언트 측에서 받아오고 싶을 때 &lt; A , B , …&gt; 처럼 사용할 수 있습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeTest</span> <span class="o">&lt;</span> <span class="no">A</span><span class="o">,</span> <span class="no">B</span><span class="o">,</span> <span class="no">C</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="no">A</span> <span class="n">first</span><span class="o">;</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">second</span><span class="o">;</span>
    <span class="kd">private</span> <span class="no">C</span> <span class="n">third</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirst</span><span class="o">(</span> <span class="no">A</span> <span class="n">first</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">first</span>  <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSecond</span><span class="o">(</span> <span class="no">B</span> <span class="n">second</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">second</span><span class="o">=</span> <span class="n">second</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setThird</span><span class="o">(</span> <span class="no">C</span> <span class="n">third</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">third</span> <span class="o">=</span> <span class="n">third</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"A의 타입은 : "</span> <span class="o">+</span> <span class="n">first</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"B의 타입은 : "</span> <span class="o">+</span> <span class="n">second</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"C의 타입은 : "</span> <span class="o">+</span> <span class="n">third</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">BeforeTest</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">beforeTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeforeTest</span><span class="o">&lt;&gt;();</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">setFirst</span><span class="o">(</span><span class="s">"안녕하세요"</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">setSecond</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">setThird</span><span class="o">(</span><span class="mf">100.0</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-wl" data-lang="wl"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="o">//</span><span class="w"> </span><span class="err">결과</span><span class="w"> 
</span><span class="nv">A</span><span class="err">의</span><span class="w"> </span><span class="err">타입은</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="nv">java</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nb">String</span><span class="w">
</span><span class="nv">B</span><span class="err">의</span><span class="w"> </span><span class="err">타입은</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="nv">java</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nb">Integer</span><span class="w">
</span><span class="nb">C</span><span class="err">의</span><span class="w"> </span><span class="err">타입은</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="nv">java</span><span class="o">.</span><span class="nv">lang</span><span class="o">.</span><span class="nv">Double</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>JAVA 7 이전에는 BeforeTest&lt;String, Integer, Double&gt; beforeTest = new BeforeTest&lt;String, Integer, Double&gt;() 처럼 new 뒤에도 &lt;&gt;안 내용을 명시해야 했지만 java 7 이후에는 생략하여 BeforeTest&lt;String, Integer, Double&gt; beforeTest = new BeforeTest&lt;&gt;() 가 가능해졌습니다. 
이를 다이아몬드 연산자라고 부릅니다.</p>

<h2 id="step-3--제네릭-메소드">Step 3 : 제네릭 메소드</h2>
<p>제네릭 메소드는 매개타입 또는 리턴타입으로 타입파라메터를 갖는 메소드를 말합니다. 
선언하는 방법은 리턴타입 앞에 &lt;&gt;를 추가하고 적어줍니다. 
즉 메소드에서 사용할 부분을 리턴타입 내부 &lt;&gt;에 적어주고 뒤에서 사용하면 됩니다. 사용 방법은 아래와 같습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeTest</span>  <span class="o">{</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span> <span class="no">T</span> <span class="n">inputObj</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">inputObj</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">())</span> <span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"문자입니다."</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputObj</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span> <span class="n">inputObj</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getTypeName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">())</span> <span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"숫자입니다."</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputObj</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">BeforeTest</span> <span class="n">beforeTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeforeTest</span><span class="o">();</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="s">"문자열 주입"</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-wl" data-lang="wl"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="o">//</span><span class="err">출력</span><span class="w">
</span><span class="err">문자입니다</span><span class="o">.</span><span class="w">
</span><span class="err">문자열</span><span class="w"> </span><span class="err">주입</span><span class="w">
</span><span class="err">숫자입니다</span><span class="o">.</span><span class="w">
</span><span class="m">10</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>2개 이상 예제, Map에 해당 키가 담겨있나 확인하는 예제입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeTest</span>  <span class="o">{</span>
    <span class="kd">public</span> <span class="o">&lt;</span> <span class="no">T</span> <span class="o">,</span> <span class="no">D</span> <span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span> <span class="nc">Map</span><span class="o">&lt;</span> <span class="no">T</span><span class="o">,</span> <span class="no">D</span> <span class="o">&gt;</span> <span class="n">map</span><span class="o">,</span> <span class="no">T</span> <span class="n">key</span> <span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">BeforeTest</span> <span class="n">beforeTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeforeTest</span><span class="o">();</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="s">"100존재"</span><span class="o">);</span>
    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"10존재"</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
    <span class="n">beforeTest</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-wl" data-lang="wl"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="o">//</span><span class="w"> </span><span class="err">출력</span><span class="w">
</span><span class="nv">true</span><span class="w">
</span><span class="nv">true</span><span class="w">
</span><span class="nv">false</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>지금까지의 코드는 구체적인 타입을 java가 알아서 추정하도록 코드를 짰습니다. 
만약 구체적으로 타입을 명시하고 싶다면 위 클라이언트 코드에서 beforeTest.&lt; Integer, String &gt;show(map, 100); 처럼 명시할 수 있습니다.</p>

<h2 id="step-4--제한된-타입-파라미터">Step 4 : 제한된 타입 파라미터</h2>
<p>제네릭의 상위 타입을 구체적으로 제한하고 싶을 경우가 있습니다. 
메서드, 인터페이스, 클래스에서 동일하게 사용 가능하며 &lt; T extends 상위타입&gt;으로 제한할 수 있습니다. 
예를 들어 내부에서 사용할 T 객체가 꼭 Number 클래스의 하위 타입이어야 할 때, 혹은 원하는 상위 인터페이스의 구현체이어야 할 때 사용 가능합니다. 그래야 메소드 안에서 필요한 인터페스의 메소드 혹은 클래스의 메소드를 사용할 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeTest</span>  <span class="o">{</span>
    <span class="kd">public</span> <span class="o">&lt;</span> <span class="no">T</span> <span class="kd">extends</span> <span class="nc">Number</span><span class="o">,</span> <span class="no">D</span> <span class="kd">extends</span> <span class="nc">Map</span> <span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span> <span class="no">D</span> <span class="n">map</span><span class="o">,</span> <span class="no">T</span> <span class="n">key</span> <span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="step-5--와일드카드-타입">Step 5 : 와일드카드 타입.</h2>
<p>코드에서 ?를 일반적으로 와일드카드라고 부릅니다. 사용하는 경우는 아래와 같습니다.</p>

<p><img src="https://minesafety-eng.github.io//assets/images/post/java/generic.png" alt="java 제네릭 하이라키" class="align-center open-new" /></p>
<h3>&lt;?&gt;</h3>
<p>모든 클래스나 인터페이스가 올 수 있습니다. 즉 제한없음.
A ~ E 모두 올 수 있다.</p>
<h3 id="-extends-상위타입">&lt;? extends 상위타입&gt;</h3>
<p>상위타입 이하로만 올 수 있습니다.
&lt;? extends D&gt; =&gt; D, E 가능</p>

<h3 id="-supper-하위타입">&lt;? supper 하위타입&gt;</h3>
<p>하위타입 이상으로만 올 수 있습니다.
&lt;? supper D&gt; =&gt; D, A 가능</p>

<p class="notice--info"><strong>참고자료</strong> <br /> <br />
– 이것이 자바다 (한빛 미디어)<br /></p>
:ET