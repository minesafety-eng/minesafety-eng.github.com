I"<h1 id="step-4--비선형구조">Step 4 : 비선형구조</h1>
<h2 id="트리tree">트리(Tree)</h2>
<p><img src="https://honbabzone.com/assets/images/post/java/data-tree.png" alt="java 쓰레드 상태" class="align-center open-new" />
트리란 위에도 가볍게 언급한, 하나의 루트 노드와 0개 이상의 자식노드로 이루어진 자료구조입니다. 주로 계층적 관계( Hierarchical Relationship )를 표현하는 자료구조입니다.  트리관련 용어를 살펴보겠습니다.</p>
<ul>
  <li>Node (노드): A,B,C와 같은 요소입니다.</li>
  <li>Root Node (루트노드): 최상위 노드 즉 A노드입니다.</li>
  <li>Edge (간선) : 노드와 노드를 연결한 선입니다.</li>
  <li>Terminal node, Leaf Node (단말노드) : 자식 노드가 없는 E, F, C, D와 같은 노드입니다.</li>
  <li>Internal Node(내부노드) : 단말 노드가 아닌 A, B와 같은 노드입니다.</li>
  <li>Degree(차수) : 자식 노드의 수를 말합니다.</li>
  <li>Preorder Traversal( 전위 순회 ) : Root -&gt; 좌 -&gt; 우 순으로 Tree를 탐색하는 방법입니다.</li>
  <li>Inorder Traversal( 중위 순회 ) : 좌 -&gt; root -&gt; 우 순으로 Tree를 탐색하는 방법입니다.</li>
  <li>Postorder Traversal ( 후위 순회 ) : 좌 -&gt; 우 -&gt; root순으로 tree를 탐색합니다.</li>
</ul>

<p>Tree의 자료구조를 표현하는 방법은 배열과 LinkedList로 표현할 수 있습니다.</p>

<h3 id="이진-트리-binary-tree-">이진 트리( Binary Tree )</h3>
<p><img src="https://honbabzone.com/assets/images/post/java/data-binary-tree.png" alt="java 쓰레드 상태" class="align-center open-new" />
각 노드가 최대 두 개의 자식을 갖는 Tree입니다. 꼭 자식 노드가 다 차지 않아도 됩니다.</p>

<h3 id="완전-이진-트리--complete-binary-tree-">완전 이진 트리 ( Complete Binary Tree )</h3>
<p><img src="https://honbabzone.com/assets/images/post/java/com-b-t.png" alt="java 쓰레드 상태" class="align-center open-new" />
마지막 레벨을 제외한 모든 노드는 채워져 있어야 하며 마지막 레벨은 왼쪽부터 채워져 있는 Binary Tree를 말합니다.</p>

<h3 id="정-이진트리--full-binary-tree-">정 이진트리 ( Full Binary Tree )</h3>
<p><img src="https://honbabzone.com/assets/images/post/java/full-b-t.png" alt="java 쓰레드 상태" class="align-center open-new" />
모든 노드가 0개 또는 2개의 자식 노드를 갖는 이진트리입니다.</p>

<h3 id="포화-이진트리--perfect-binary-tree-">포화 이진트리 ( Perfect Binary Tree )</h3>
<p><img src="https://honbabzone.com/assets/images/post/java/p-b-t.png" alt="java 쓰레드 상태" class="align-center open-new" />
모든 레벨의 노드가 꽉 차있는 이진트리입니다.</p>

<h3 id="이진-탐색-트리--binary-search-tree-">이진 탐색 트리 ( Binary Search Tree )</h3>
<p><img src="https://honbabzone.com/assets/images/post/java/b-s-t.png" alt="java 쓰레드 상태" class="align-center open-new" /></p>

<p>중복된 값이 없으면서 왼쪽 자식 노드 값 &lt; root 노드 &lt; 오른쪽 자식 노드 값을 만족하는 이진트리입니다. root 노드 하위 왼쪽 노드 집합들은 root 노드 값보다 작아야 하며 우측 집합은 커야 합니다.<br /><br /><br /></p>

<p>Tree구조로 할 수 있는 것은 다양합니다. 언급하지는 않았지만, Expression Tree와 같은 형태로 들어온 데이터를 구성할 수도 있고 새로운 형식의 데이터를 만들어 담을 수도 있습니다. 이제 Tree를 어떻게 구성하는지 알아보겠습니다.<br /></p>

<p>ex)  수식 트리 Expression Tree <br />
수식을 tree형태로 분리한 tree <br />
7 + 4 * 2 -1 를 나타낸 트리는 아래와 같습니다.<br /></p>

<p><img src="https://honbabzone.com/assets/images/post/java/e-t.png" alt="java 쓰레드 상태" class="align-center open-new" /></p>

<h4 id="linked-list로-tree-구현">Linked List로 Tree 구현</h4>
<p>트리는 원하는 방식으로 원하는 모양으로 무궁무진하게 만들 수 있습니다. 단순한 이진 트리를 구현해보겠습니다.</p>

<ul>
  <li>getValue() : 노드에 저장된 데이터 return</li>
  <li>setLeftNode() : 왼쪽 노드 세팅</li>
  <li>setRightNode() : 우측 노드 세팅</li>
  <li>getLetNode(): 좌측 노드 데이터 return</li>
  <li>getRightNode(): 우측 노드 데이터 return</li>
  <li>inOrderTraversal() : 중위 순회 왼쪽 node -&gt; root node -&gt; 오른쪽 node</li>
  <li>preOrderTraversal() : root node -&gt; 왼쪽 node -&gt; 오른쪽 node</li>
  <li>postOrderTraversal() : 왼쪽 node -&gt; 오른쪽 node -&gt; root node</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">leftNode</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rightNode</span><span class="o">;</span>
   
    <span class="kd">public</span> <span class="nf">TreeWithLinkedList</span><span class="o">(</span> <span class="no">T</span> <span class="n">value</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/**
     * left -&gt; root -&gt; right
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">inOrderTraversal</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">leftNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">leftNode</span><span class="o">.</span><span class="na">inOrderTraversal</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">rightNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">rightNode</span><span class="o">.</span><span class="na">inOrderTraversal</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="cm">/**
     * root -&gt; left -&gt; right
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preOrderTraversal</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">leftNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">leftNode</span><span class="o">.</span><span class="na">preOrderTraversal</span><span class="o">();</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">rightNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">rightNode</span><span class="o">.</span><span class="na">preOrderTraversal</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/**
     * left -&gt; right -&gt; root
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postOrderTraversal</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">leftNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">leftNode</span><span class="o">.</span><span class="na">postOrderTraversal</span><span class="o">();</span>
         <span class="k">if</span><span class="o">(</span> <span class="n">rightNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">rightNode</span><span class="o">.</span><span class="na">postOrderTraversal</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getLeftNode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">leftNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLeftNode</span><span class="o">(</span><span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">leftNode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">leftNode</span> <span class="o">=</span> <span class="n">leftNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getRightNode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">rightNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRightNode</span><span class="o">(</span><span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rightNode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rightNode</span> <span class="o">=</span> <span class="n">rightNode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="mi">1</span><span class="o">);</span>
<span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">rootLeft</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="mi">2</span><span class="o">);</span>
<span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">rootRight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="mi">3</span><span class="o">);</span>
<span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">rootLeftLeft</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="mi">4</span><span class="o">);</span>
<span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">rootLeftRight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeWithLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="mi">5</span><span class="o">);</span>

<span class="n">root</span><span class="o">.</span><span class="na">setLeftNode</span><span class="o">(</span><span class="n">rootLeft</span><span class="o">);</span>
<span class="n">root</span><span class="o">.</span><span class="na">setRightNode</span><span class="o">(</span><span class="n">rootRight</span><span class="o">);</span>
<span class="n">rootLeft</span><span class="o">.</span><span class="na">setLeftNode</span><span class="o">(</span><span class="n">rootLeftLeft</span><span class="o">);</span>
<span class="n">rootLeft</span><span class="o">.</span><span class="na">setRightNode</span><span class="o">(</span><span class="n">rootLeftRight</span><span class="o">);</span>

<span class="n">root</span><span class="o">.</span><span class="na">inOrderTraversal</span><span class="o">();</span> <span class="c1">// 중위순회 left -&gt; root -&gt; right &gt;&gt; 4 2 5 1 3 </span>
<span class="n">root</span><span class="o">.</span><span class="na">preOrderTraversal</span><span class="o">();</span> <span class="c1">// 전위순회 root -&gt; left -&gt; right &gt;&gt; 1 2 4 5 3 </span>
<span class="n">root</span><span class="o">.</span><span class="na">postOrderTraversal</span><span class="o">();</span> <span class="c1">// 후위순회 left -&gt; right -&gt; root &gt;&gt; 4 5 2 3 1</span>
</code></pre></div></div>

<h4 id="배열로-tree-구현">배열로 Tree 구현</h4>
<p>배열로 2진트리를 구성하려면 우선 배열의 크기를 정해야 하기 때문에 최종 데이터의 크기를 알아야 한다는 점, 왼쪽 노트의 위치, 우측 노드의 위치, 부모 위치 구하는 방법을 알아야합니다.</p>

<ul>
  <li>왼쪽 자식의 index : ( 자기자신의 index ) * 2 +1</li>
  <li>오른쪽 자식의 index : 왼쪽 자식의 index + 1 = ( 자기자신의 index ) * 2 +2</li>
  <li>부모 index : ( 자기 자신의 index -1 ) / 2</li>
  <li>총 크기 : Perfect Binary Tree 크기 만큼 하기 위해, 최종 데이터의 크기를 꽉 찬 트리 size로 만든후 그 크기 * 2 배만큼의 크기가 필요합니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeWithArray</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="n">tree</span> <span class="o">[];</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">treeSize</span><span class="o">;</span>
   
    <span class="kd">public</span> <span class="nf">TreeWithArray</span><span class="o">(</span> <span class="kt">int</span> <span class="n">arraySize</span> <span class="o">)</span> <span class="o">{</span>
       <span class="n">treeSize</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        
        <span class="k">while</span> <span class="o">(</span><span class="n">treeSize</span> <span class="o">&lt;</span> <span class="n">arraySize</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">treeSize</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">treeSize</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span> <span class="n">treeSize</span> <span class="o">];</span>
    <span class="o">}</span>
    
    <span class="cm">/**
     * left -&gt; root -&gt; right
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">inOrderTraversal</span><span class="o">(</span> <span class="kt">int</span> <span class="n">checkIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span>  <span class="n">checkIndex</span> <span class="o">&lt;</span> <span class="n">treeSize</span> <span class="o">&amp;&amp;</span> <span class="n">tree</span><span class="o">[</span><span class="n">checkIndex</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">leftChildIndex</span> <span class="o">=</span> <span class="n">getLeftNodeIndex</span><span class="o">(</span><span class="n">checkIndex</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">rightChildIndex</span> <span class="o">=</span>  <span class="n">getRightNodeIndex</span><span class="o">(</span><span class="n">checkIndex</span><span class="o">);</span>
            <span class="n">inOrderTraversal</span><span class="o">(</span> <span class="n">leftChildIndex</span> <span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tree</span><span class="o">[</span><span class="n">checkIndex</span><span class="o">].</span><span class="na">toString</span><span class="o">());</span>
            <span class="n">inOrderTraversal</span><span class="o">(</span> <span class="n">rightChildIndex</span> <span class="o">);</span>
        <span class="o">}</span> 
    <span class="o">}</span>
    
    <span class="cm">/**
     * root -&gt; left -&gt; right
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preOrderTraversal</span><span class="o">(</span> <span class="kt">int</span> <span class="n">checkIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span>  <span class="n">checkIndex</span> <span class="o">&lt;</span> <span class="n">treeSize</span> <span class="o">&amp;&amp;</span> <span class="n">tree</span><span class="o">[</span><span class="n">checkIndex</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">leftChildIndex</span> <span class="o">=</span> <span class="n">getLeftNodeIndex</span><span class="o">(</span><span class="n">checkIndex</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">rightChildIndex</span> <span class="o">=</span>  <span class="n">getRightNodeIndex</span><span class="o">(</span><span class="n">checkIndex</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tree</span><span class="o">[</span><span class="n">checkIndex</span><span class="o">].</span><span class="na">toString</span><span class="o">());</span>
            <span class="n">preOrderTraversal</span><span class="o">(</span> <span class="n">leftChildIndex</span> <span class="o">);</span>
            <span class="n">preOrderTraversal</span><span class="o">(</span> <span class="n">rightChildIndex</span> <span class="o">);</span>
        <span class="o">}</span> 
    <span class="o">}</span>

    <span class="cm">/**
     * left -&gt; right -&gt; root
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postOrderTraversal</span><span class="o">(</span> <span class="kt">int</span> <span class="n">checkIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span>  <span class="n">checkIndex</span> <span class="o">&lt;</span> <span class="n">treeSize</span> <span class="o">&amp;&amp;</span> <span class="n">tree</span><span class="o">[</span><span class="n">checkIndex</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">leftChildIndex</span> <span class="o">=</span> <span class="n">getLeftNodeIndex</span><span class="o">(</span><span class="n">checkIndex</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">rightChildIndex</span> <span class="o">=</span>  <span class="n">getRightNodeIndex</span><span class="o">(</span><span class="n">checkIndex</span><span class="o">);</span>
            <span class="n">postOrderTraversal</span><span class="o">(</span> <span class="n">leftChildIndex</span> <span class="o">);</span>
            <span class="n">postOrderTraversal</span><span class="o">(</span> <span class="n">rightChildIndex</span> <span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tree</span><span class="o">[</span><span class="n">checkIndex</span><span class="o">].</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span> 
    <span class="o">}</span>


    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getValue</span><span class="o">(</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span><span class="n">tree</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span> <span class="no">T</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="n">treeSize</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"size를 확인하세요"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">tree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getLeftNode</span><span class="o">(</span> <span class="kt">int</span> <span class="n">parentIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">getLeftNodeIndex</span><span class="o">(</span><span class="n">parentIndex</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">childIndex</span> <span class="o">&gt;=</span> <span class="n">treeSize</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"size를 확인하세요"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span><span class="n">tree</span><span class="o">[</span><span class="n">childIndex</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLeftNode</span><span class="o">(</span> <span class="no">T</span> <span class="n">leftNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parentIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">getLeftNodeIndex</span><span class="o">(</span> <span class="n">parentIndex</span> <span class="o">);</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">childIndex</span> <span class="o">&gt;=</span> <span class="n">treeSize</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"size를 확인하세요"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">tree</span><span class="o">[</span><span class="n">childIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">leftNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getRightNode</span><span class="o">(</span> <span class="kt">int</span> <span class="n">parentIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span>  <span class="n">getRightNodeIndex</span><span class="o">(</span> <span class="n">parentIndex</span> <span class="o">);</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">childIndex</span> <span class="o">&gt;=</span> <span class="n">treeSize</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"size를 확인하세요"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span><span class="n">tree</span><span class="o">[</span><span class="n">childIndex</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRightNode</span><span class="o">(</span> <span class="no">T</span> <span class="n">rightNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parentIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">childIndex</span> <span class="o">=</span> <span class="n">getRightNodeIndex</span><span class="o">(</span> <span class="n">parentIndex</span> <span class="o">);</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">childIndex</span> <span class="o">&gt;=</span> <span class="n">treeSize</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"size를 확인하세요"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">tree</span><span class="o">[</span><span class="n">childIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">rightNode</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLeftNodeIndex</span><span class="o">(</span> <span class="kt">int</span> <span class="n">parentIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parentIndex</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getRightNodeIndex</span><span class="o">(</span> <span class="kt">int</span> <span class="n">parentIndex</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parentIndex</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span><span class="mi">2</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TreeWithArray</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeWithArray</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="mi">5</span><span class="o">);</span>
<span class="n">tree</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">tree</span><span class="o">.</span><span class="na">setLeftNode</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">tree</span><span class="o">.</span><span class="na">setRightNode</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">tree</span><span class="o">.</span><span class="na">setLeftNode</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">tree</span><span class="o">.</span><span class="na">getLeftNodeIndex</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="n">tree</span><span class="o">.</span><span class="na">setRightNode</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">tree</span><span class="o">.</span><span class="na">getLeftNodeIndex</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>

<span class="n">tree</span><span class="o">.</span><span class="na">inOrderTraversal</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 중위순회 left -&gt; root -&gt; right &gt;&gt; 4 2 5 1 3 </span>
<span class="n">tree</span><span class="o">.</span><span class="na">preOrderTraversal</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 전위순회 root -&gt; left -&gt; right &gt;&gt; 1 2 4 5 3 </span>
<span class="n">tree</span><span class="o">.</span><span class="na">postOrderTraversal</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 후위순회 left -&gt; right -&gt; root &gt;&gt; 4 5 2 3 1</span>
</code></pre></div></div>

<h2 id="그래프">그래프</h2>
<p><img src="https://honbabzone.com/assets/images/post/java/graph.png" alt="java 쓰레드 상태" class="align-center open-new" /></p>

<p>그래프란 위 그림에서 보는 것처럼 노드와 노드를 연결한 간선이 존재하는 자료구조입니다. 이전 자료구조를 공부하면서 봤었던 용어들입니다.</p>

<ul>
  <li>Vertex (정점) : 하나의 노드를 말합니다.</li>
  <li>Edge (간선) : 정점을 연결하는 선입니다.</li>
  <li>Adjacent vertex ( 인접정점 ) :  자기 자신 정점과 바로 연결된 정점을 말합니다.</li>
  <li>Degree ( 차수 ) :  자기 자신과 연결된 간선의 개수를 말합니다.</li>
  <li>Cycle : 한 정점에서 시작하여 자기자신으로 끝나는 경로를 말합니다.</li>
  <li>오일러 경로 : 그래프에 존재하는 모든 간선을 한 번만 통과하는 것 » 오일러 경로는 차수가 홀수인 정점이 2개일때 존재합니다.</li>
  <li>오일러 회로 : 오일러 경로 + 시작점과 끝점이 같은 경우 = 한 붓 그리기 » 차수가 홀수인 정점이 0개일때 오일러 회로가 존재합니다.</li>
</ul>

<h3 id="방향-그래프">방향 그래프</h3>
<p>그래프에 방향이 존재하여 G(A,B)는 G(B,A)는 다른 경우를 말합니다.</p>

<h3 id="무방향-그래프">무방향 그래프</h3>
<p>그래프에 방향이 존재하지 않아 양 방향으로 갈 수 있다. G(A,B)는 G(B,A)와 동일한 경우를 말합니다.</p>

<h3 id="가중치-그래프weighted-graph">가중치 그래프(Weighted Graph)</h3>
<p>간선에 비용이나 가중치가 할당된 그래프를 말합니다.</p>

<p>솔직히 업무에서 그래프를 다루거나 사용한 사례는 없어 잘 아는 자료구조는 아닙니다. 단지 백준 알고리즘 혹은 카카오 알고리즘을 풀어 볼 때 관련 내용 등장하면 사용 및 공부하기 위해 정리합니다. 그래프 자료구조를 구현하는 방법은 크게 두 가지가 존재합니다. 하나는 인접 리스트로 구현하는 방법과, 인접행렬로 구현하는 방법입니다.</p>

<p><img src="https://honbabzone.com/assets/images/post/java/graph-sample.png" alt="java 쓰레드 상태" class="align-center open-new" /></p>

<h4 id="인접-리스트adjacency-list로-구현">인접 리스트(Adjacency List)로 구현</h4>
<p>내용은 간단합니다. 배열의 index는 자기 자신의 노드 위치를 말하며, 저장된 value는 해당 노드와 연결된 인접 노드를 가리킵니다. 추가로 두 노드 사이의 가중치를 저장하도록 양방향 그래프로 구현해보겠습니다.</p>

<ul>
  <li>push() : 데이터 삽입.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphArrayList</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;&gt;</span> <span class="n">graph</span><span class="o">;</span>
    
    <span class="c1">// 정점의 개수로 초기화</span>
    <span class="kd">public</span> <span class="nf">GraphArrayList</span><span class="o">(</span> <span class="kt">int</span> <span class="n">nodeSize</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;&gt;();</span>
        
        <span class="c1">// 각각의 정점들 초기화</span>
        <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">nodeSize</span><span class="o">;</span> <span class="n">index</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;()</span> <span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span> <span class="kt">int</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">pushOnly</span><span class="o">(</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="n">weight</span> <span class="o">);</span>
        <span class="n">pushOnly</span><span class="o">(</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="n">weight</span> <span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pushOnly</span><span class="o">(</span> <span class="kt">int</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">{</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="n">weight</span> <span class="o">};</span>
        <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">orignalNode</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"정점 "</span> <span class="o">+</span> <span class="n">index</span> <span class="o">+</span> <span class="s">"의 인접리스트"</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">indexInner</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">indexInner</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">size</span><span class="o">();</span> <span class="n">indexInner</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">indexInner</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span> <span class="n">temp</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="s">"("</span><span class="o">+</span><span class="n">temp</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="s">")"</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GraphArrayList</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GraphArrayList</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>

<span class="n">graph</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-wl" data-lang="wl"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="o">//</span><span class="w"> </span><span class="err">출력</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">0</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">1</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">1</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">0</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="m">2</span><span class="p">(</span><span class="m">7</span><span class="p">)</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">2</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">1</span><span class="p">(</span><span class="m">7</span><span class="p">)</span><span class="w"> </span><span class="m">3</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">3</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">2</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h4 id="인접-행렬adjacency-matrix로-구현">인접 행렬(Adjacency Matrix)로 구현</h4>
<p>구현 내용은 간단합니다. 2차원 배열에 index가 두 노드의 연결 여부 및 가중치를 나타냅니다. 아래 코드를 보면 이해가 될 것입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphMatrix</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GraphMatrix</span><span class="o">(</span> <span class="kt">int</span> <span class="n">nodeSize</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="o">[</span><span class="n">nodeSize</span><span class="o">][</span><span class="n">nodeSize</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span> <span class="kt">int</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">graph</span><span class="o">[</span><span class="n">orignalNode</span><span class="o">][</span><span class="n">adjacentNode</span><span class="o">]</span> <span class="o">=</span> <span class="n">weight</span><span class="o">;</span>
        <span class="n">graph</span><span class="o">[</span><span class="n">adjacentNode</span><span class="o">][</span><span class="n">orignalNode</span><span class="o">]</span> <span class="o">=</span> <span class="n">weight</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"정점 "</span> <span class="o">+</span> <span class="n">index</span> <span class="o">+</span> <span class="s">"의 인접리스트"</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">indexInner</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">indexInner</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">indexInner</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span> <span class="n">graph</span><span class="o">[</span><span class="n">index</span><span class="o">][</span><span class="n">indexInner</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span> <span class="n">indexInner</span><span class="o">+</span><span class="s">"("</span><span class="o">+</span><span class="n">graph</span><span class="o">[</span><span class="n">index</span><span class="o">][</span><span class="n">indexInner</span><span class="o">]+</span><span class="s">")"</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GraphMatrix</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GraphMatrix</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>

<span class="n">graph</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-wl" data-lang="wl"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="o">//</span><span class="err">출력</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">0</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">1</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">1</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">0</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="m">2</span><span class="p">(</span><span class="m">7</span><span class="p">)</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">2</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">1</span><span class="p">(</span><span class="m">7</span><span class="p">)</span><span class="w"> </span><span class="m">3</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w"> 
</span><span class="err">정점</span><span class="w"> </span><span class="m">3</span><span class="err">의</span><span class="w"> </span><span class="err">인접리스트</span><span class="w">
</span><span class="m">2</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><br />
이런 그래프를 일반적으로 탐색하는 방법은 2가지입니다. 하나는 깊이우선탐색(DFS), 다른 하나는 너비 우선 탐색(BFS)입니다.</p>

<p><img src="https://honbabzone.com/assets/images/post/java/bfs.png" alt="java 쓰레드 상태" class="align-center open-new" /></p>
<h4 id="깊이우선탐색-depth-first-search-">깊이우선탐색( Depth First Search )</h4>
<p>하나의 정점에서 시작하여 다음 인접 노드를 지속해서 확인하여 모든 노드를 탐색하는 방법입니다. 원리는 root노드를 정한 후 인접 노드를 stack에 집어넣고 stack을 순회하면서 호출된 적 있는지 확인 후 반복하는 일만 진행하면 됩니다.</p>

<h4 id="너비우선탐색--breadth-first-search-">너비우선탐색 ( Breadth First Search )</h4>
<p>하나의 정점에서 시작하여 하나의 정점을 완벽히 탐색 후 다음 정점을 넘어가 모든 노드를 탐색하는 방법입니다. 원리는 간단합니다. root노드를 정한 후 root노드에 관련된 인접 노드를 que에 집어넣고 해당 que를 순회하면서 한 번 호출된 적 있는 노드인지 확인 후 que가 빌 때까지 지속하는 방법입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GraphMatrix</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">nodeSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GraphMatrix</span><span class="o">(</span> <span class="kt">int</span> <span class="n">nodeSize</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="o">[</span><span class="n">nodeSize</span><span class="o">][</span><span class="n">nodeSize</span><span class="o">];</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nodeSize</span> <span class="o">=</span> <span class="n">nodeSize</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span> <span class="kt">int</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">adjacentNode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">graph</span><span class="o">[</span><span class="n">orignalNode</span><span class="o">][</span><span class="n">adjacentNode</span><span class="o">]</span> <span class="o">=</span> <span class="n">weight</span><span class="o">;</span>
        <span class="n">graph</span><span class="o">[</span><span class="n">adjacentNode</span><span class="o">][</span><span class="n">orignalNode</span><span class="o">]</span> <span class="o">=</span> <span class="n">weight</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">nodeSize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">" 노드가 비어있습니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nodeSize</span><span class="o">];</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nodesQue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">bfsLoopChecking</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">cache</span><span class="o">,</span> <span class="n">nodesQue</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span> <span class="n">nodeSize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">" 노드가 비어있습니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nodeSize</span><span class="o">];</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nodesStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        <span class="n">dfsLoopChecking</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">cache</span><span class="o">,</span> <span class="n">nodesStack</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">bfsLoopChecking</span><span class="o">(</span> <span class="kt">int</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">cache</span> <span class="o">,</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nodesQue</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">nodesQue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="n">orignalNode</span> <span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span> <span class="o">!</span><span class="n">nodesQue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
            <span class="nc">Integer</span> <span class="n">nextNodes</span> <span class="o">=</span> <span class="n">nodesQue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span> <span class="n">cache</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">){</span>
                <span class="n">cache</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">nextNodes</span> <span class="o">+</span> <span class="s">" 탐색하였습니다."</span><span class="o">);</span>
                <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">childNode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">childNode</span> <span class="o">&lt;</span>  <span class="n">graph</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">childNode</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span> <span class="n">graph</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">][</span><span class="n">childNode</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cache</span><span class="o">[</span><span class="n">childNode</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="n">nodesQue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">childNode</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">dfsLoopChecking</span><span class="o">(</span> <span class="kt">int</span> <span class="n">orignalNode</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">cache</span> <span class="o">,</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nodesStack</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">nodesStack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="n">orignalNode</span> <span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span> <span class="o">!</span><span class="n">nodesStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
            <span class="nc">Integer</span> <span class="n">nextNodes</span> <span class="o">=</span> <span class="n">nodesStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span> <span class="n">cache</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">){</span>
                <span class="n">cache</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">nextNodes</span> <span class="o">+</span> <span class="s">" 탐색하였습니다."</span><span class="o">);</span>
                <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">childNode</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">childNode</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">childNode</span><span class="o">--</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span> <span class="n">graph</span><span class="o">[</span><span class="n">nextNodes</span><span class="o">][</span><span class="n">childNode</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cache</span><span class="o">[</span><span class="n">childNode</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="n">nodesStack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">childNode</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GraphMatrix</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GraphMatrix</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">graph</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

<span class="n">graph</span><span class="o">.</span><span class="na">bfs</span><span class="o">();</span> <span class="c1">// 0 1 2 4 3</span>
<span class="n">graph</span><span class="o">.</span><span class="na">dfs</span><span class="o">();</span> <span class="c1">// 0 1 2 3 4</span>

</code></pre></div></div>

<p class="notice--info"><strong>참고자료</strong> <br /> <br />
– 윤성우의 열혈 자료구조 ( C언어 ) <br /> 
– 위키백과</p>
:ET